/**
 * 
 */
package org.cryptokitty.test;

import java.math.BigInteger;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Security;
import java.security.spec.MGF1ParameterSpec;
import java.util.Arrays;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.OAEPParameterSpec;
import javax.crypto.spec.PSource;

import org.cryptokitty.codec.Scalar64;
import org.cryptokitty.digest.MD5;
import org.cryptokitty.keys.RSAPrivateCrtKey;
import org.cryptokitty.keys.RSAPrivateModKey;
import org.cryptokitty.keys.RSAPublicKey;
import org.cryptokitty.xprovider.CryptoKittyProvider;
import org.cryptokitty.digest.Digest;

/**
 * @author Steve Brenneis
 *
 */
public class RSATest {

	/**
	 * 
	 */
	public RSATest() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		Security.addProvider(new CryptoKittyProvider());

		try {

			KeyPairGenerator keyGen;
			// Generate a key pair.
			keyGen = KeyPairGenerator.getInstance("RSA", "CryptoKitty");
			keyGen.initialize(2048);
			KeyPair ckpair = keyGen.generateKeyPair();

			Digest digest = new MD5();
			byte[] message = digest.digest(Scalar64.encode(System.nanoTime()));

			// Test OAEP encoding.
			Cipher rsae = Cipher.getInstance("RSA", "CryptoKitty");
			rsae.init(Cipher.ENCRYPT_MODE, ckpair.getPublic(),
					new OAEPParameterSpec("SHA-512", "MGF1", new MGF1ParameterSpec("SHA-512"),
											new PSource.PSpecified(new byte[0])));
			byte[] ciphertext = rsae.doFinal(message);

			Cipher rsad = Cipher.getInstance("RSA", "CryptoKitty");
			rsad.init(Cipher.DECRYPT_MODE, ckpair.getPrivate(),
			new OAEPParameterSpec("SHA-512", "MGF1", new MGF1ParameterSpec("SHA-512"),
					new PSource.PSpecified(new byte[0])));
			byte[] plaintext = rsad.doFinal(ciphertext);
			if (Arrays.equals(message, plaintext)) {
				System.out.println("RSA OEAP test passed!");
			}
			else {
				System.out.println("RSA OAEP test failed!");;				
			}

			// Test PKCS encoding.
			rsae = Cipher.getInstance("RSA", "CryptoKitty");
			rsae.init(Cipher.ENCRYPT_MODE, ckpair.getPublic());
			ciphertext = rsae.doFinal(message);

			rsad = Cipher.getInstance("RSA", "CryptoKitty");
			rsad.init(Cipher.DECRYPT_MODE, ckpair.getPrivate());
			plaintext = rsad.doFinal(ciphertext);
			if (Arrays.equals(message, plaintext)) {
				System.out.println("RSA PKCS test 1 passed!");
			}
			else {
				System.out.println("RSA PKCS test 1 failed!");;				
			}

			// PKCS Test Vectors
			byte[] pkcsMessage1 =
				{ (byte)0xd9, 0x4a, (byte)0xe0, (byte)0x83, 0x2e, 0x64, 0x45,
					(byte)0xce, 0x42, 0x33, 0x1c, (byte)0xb0, 0x6d, 0x53, 0x1a,
					(byte)0x82, (byte)0xb1, (byte)0xdb, 0x4b, (byte)0xaa,
					(byte)0xd3, 0x0f, 0x74, 0x6d, (byte)0xc9, 0x16, (byte)0xdf,
					0x24, (byte)0xd4, (byte)0xe3, (byte)0xc2, 0x45, 0x1f,
					(byte)0xff, 0x59, (byte)0xa6, 0x42, 0x3e, (byte)0xb0,
					(byte)0xe1, (byte)0xd0, 0x2d, 0x4f, (byte)0xe6, 0x46,
					(byte)0xcf, 0x69, (byte)0x9d, (byte)0xfd, (byte)0x81,
					(byte)0x8c, 0x6e, (byte)0x97, (byte)0xb0, 0x51 };

			byte[] ps1 =
				{ (byte)0xdd, 0x2d, 0x60, (byte)0xa5, (byte)0xe0, 0x08,
					(byte)0xeb, (byte)0xe1, (byte)0xd0, (byte)0xbe, 0x6f, 0x60,
					(byte)0xdb, (byte)0xc4, 0x3f, 0x29, 0x62, (byte)0xef, 0x50,
					(byte)0xbf, (byte)0xde, 0x54, 0x2b, (byte)0xbb, (byte)0xe9,
					(byte)0x8f, (byte)0xed, (byte)0xd1, (byte)0xfe, (byte)0xac,
					0x05, 0x7e, 0x77, 0x1c, (byte)0xf1, 0x5f, (byte)0xc6, 0x32,
					(byte)0xc8, (byte)0xdb, 0x27, 0x2e, 0x28, (byte)0xd2,
					(byte)0x9b, 0x57, (byte)0x93, (byte)0xea, 0x6a, (byte)0xb8,
					0x06, 0x21, (byte)0x8c, 0x53, (byte)0x82, 0x39, (byte)0xb9,
					0x3a, (byte)0x93, 0x5e, 0x65, (byte)0xd2, 0x44, 0x16,
					(byte)0xec, 0x6c, 0x6e, (byte)0x99, (byte)0xae, 0x04 };

			byte[] pkcsCiphertext1 =
				{ 0x70, (byte)0x9c, 0x7d, 0x2d, 0x45, (byte)0x98, (byte)0xc9, 0x60,
					0x65, (byte)0xb6, 0x58, (byte)0x8d, (byte)0xa2, (byte)0xf8,
					(byte)0x9f, (byte)0xa8, 0x7f, 0x06, 0x2d, 0x72, 0x41,
					(byte)0xef, 0x65, (byte)0x95, (byte)0x89, (byte)0x8f, 0x63,
					0x7a, (byte)0xda, 0x57, (byte)0xea, (byte)0xe9, 0x01, 0x73,
					(byte)0xf0, (byte)0xfb, 0x4b, (byte)0xf6, (byte)0xa9, 0x1e,
					(byte)0xbd, (byte)0x96, 0x50, 0x69, 0x07, (byte)0xc8, 0x53,
					(byte)0xda, (byte)0xcf, 0x20, (byte)0x84, (byte)0x94,
					(byte)0xbe, (byte)0x94, (byte)0xd3, 0x13, (byte)0xa0, 0x41,
					(byte)0x85, (byte)0xd4, 0x74, (byte)0xa9, 0x07, 0x41,
					0x2e, (byte)0xff, (byte)0xc3, (byte)0xe0, 0x24, (byte)0xd0,
					0x7e, 0x4d, 0x09, (byte)0xaa, 0x24, 0x5f, (byte)0xbc,
					(byte)0xb1, 0x30, 0x21, (byte)0x9b, (byte)0xfa, 0x5d,
					(byte)0xe0, 0x2d, 0x4f, 0x7e, 0x2e, (byte)0xc9, (byte)0xe6,
					0x2e, (byte)0x8a, (byte)0xd3, 0x2d, (byte)0xee, 0x5f,
					(byte)0xf4, (byte)0xd8, (byte)0xe4, (byte)0xcf, (byte)0xec,
					(byte)0xbc, 0x50, 0x33, (byte)0xa1, (byte)0xc2, (byte)0xc6,
					0x1c, 0x52, 0x33, (byte)0xae, 0x16, 0x19, 0x2a, 0x48, 0x1d,
					0x00, 0x75, (byte)0xbf, (byte)0xc7, (byte)0xce, 0x02,
					(byte)0x82, 0x12, (byte)0xcd, 0x27, (byte)0xbe, (byte)0xbe };

			byte[] P1 =
				{ (byte)0xd3, 0x27, 0x37, (byte)0xe7, 0x26, 0x7f, (byte)0xfe,
					0x13, 0x41, (byte)0xb2, (byte)0xd5, (byte)0xc0, (byte)0xd1,
					0x50, (byte)0xa8, 0x1b, 0x58, 0x6f, (byte)0xb3, 0x13, 0x2b,
					(byte)0xed, 0x2f, (byte)0x8d, 0x52, 0x62, (byte)0x86, 0x4a,
					(byte)0x9c, (byte)0xb9, (byte)0xf3, 0x0a, (byte)0xf3,
					(byte)0x8b, (byte)0xe4, 0x48, 0x59, (byte)0x8d, 0x41, 0x3a,
					0x17, 0x2e, (byte)0xfb, (byte)0x80, 0x2c, 0x21, (byte)0xac,
					(byte)0xf1, (byte)0xc1, 0x1c, 0x52, 0x0c, 0x2f, 0x26,
					(byte)0xa4, 0x71, (byte)0xdc, (byte)0xad, 0x21, 0x2e,
					(byte)0xac, 0x7c, (byte)0xa3, (byte)0x9d,};

			byte[] Q1 =
				{ (byte)0xcc, (byte)0x88, 0x53, (byte)0xd1, (byte)0xd5, 0x4d,
					(byte)0xa6, 0x30, (byte)0xfa, (byte)0xc0, 0x04, (byte)0xf4,
					0x71, (byte)0xf2, (byte)0x81, (byte)0xc7, (byte)0xb8,
					(byte)0x98, 0x2d, (byte)0x82, 0x24, (byte)0xa4, (byte)0x90,
					(byte)0xed, (byte)0xbe, (byte)0xb3, 0x3d, 0x3e, 0x3d, 0x5c,
					(byte)0xc9, 0x3c, 0x47, 0x65, 0x70, 0x3d, 0x1d, (byte)0xd7,
					(byte)0x91, 0x64, 0x2f, 0x1f, 0x11, 0x6a, 0x0d, (byte)0xd8,
					0x52, (byte)0xbe, 0x24, 0x19, (byte)0xb2, (byte)0xaf, 0x72,
					(byte)0xbf, (byte)0xe9, (byte)0xa0, 0x30, (byte)0xe8, 0x60,
					(byte)0xb0, 0x28, (byte)0x8b, 0x5d, 0x77 };

			byte[] N1 = 
				{ (byte)0xa8, (byte)0xb3, (byte)0xb2, (byte)0x84, (byte)0xaf,
					(byte)0x8e, (byte)0xb5, 0x0b, 0x38, 0x70, 0x34, (byte)0xa8,
					0x60, (byte)0xf1, 0x46, (byte)0xc4, (byte)0x91, (byte)0x9f,
					0x31, (byte)0x87, 0x63, (byte)0xcd, 0x6c, 0x55, (byte)0x98,
					(byte)0xc8, (byte)0xae, 0x48, 0x11, (byte)0xa1, (byte)0xe0,
					(byte)0xab, (byte)0xc4, (byte)0xc7, (byte)0xe0, (byte)0xb0,
					(byte)0x82, (byte)0xd6, (byte)0x93, (byte)0xa5, (byte)0xe7,
					(byte)0xfc, (byte)0xed, 0x67, 0x5c, (byte)0xf4, 0x66,
					(byte)0x85, 0x12, 0x77, 0x2c, 0x0c, (byte)0xbc, 0x64,
					(byte)0xa7, 0x42, (byte)0xc6, (byte)0xc6, 0x30, (byte)0xf5,
					0x33, (byte)0xc8, (byte)0xcc, 0x72, (byte)0xf6, 0x2a,
					(byte)0xe8, 0x33, (byte)0xc4, 0x0b, (byte)0xf2, 0x58, 0x42,
					(byte)0xe9, (byte)0x84, (byte)0xbb, 0x78, (byte)0xbd,
					(byte)0xbf, (byte)0x97, (byte)0xc0, 0x10, 0x7d, 0x55,
					(byte)0xbd, (byte)0xb6, 0x62, (byte)0xf5, (byte)0xc4,
					(byte)0xe0, (byte)0xfa, (byte)0xb9, (byte)0x84, 0x5c,
					(byte)0xb5, 0x14, (byte)0x8e, (byte)0xf7, 0x39, 0x2d,
					(byte)0xd3, (byte)0xaa, (byte)0xff, (byte)0x93, (byte)0xae,
					0x1e, 0x6b, 0x66, 0x7b, (byte)0xb3, (byte)0xd4, 0x24, 0x76,
					0x16, (byte)0xd4, (byte)0xf5, (byte)0xba, 0x10, (byte)0xd4,
					(byte)0xcf, (byte)0xd2, 0x26, (byte)0xde, (byte)0x88,
					(byte)0xd3, (byte)0x9f, 0x16, (byte)0xfb };

			byte[] E1 = { 0x01, 0x00, 0x01 };

			byte[] D1 =
				{ 0x53, 0x33, (byte)0x9c, (byte)0xfd, (byte)0xb7, (byte)0x9f,
					(byte)0xc8, 0x46, 0x6a, 0x65, 0x5c, 0x73, 0x16, (byte)0xac,
					(byte)0xa8, 0x5c, 0x55, (byte)0xfd, (byte)0x8f, 0x6d,
					(byte)0xd8, (byte)0x98, (byte)0xfd, (byte)0xaf, 0x11,
					(byte)0x95, 0x17, (byte)0xef, 0x4f, 0x52, (byte)0xe8,
					(byte)0xfd, (byte)0x8e, 0x25, (byte)0x8d, (byte)0xf9, 0x3f,
					(byte)0xee, 0x18, 0x0f, (byte)0xa0, (byte)0xe4, (byte)0xab,
					0x29, 0x69, 0x3c, (byte)0xd8, 0x3b, 0x15, 0x2a, 0x55, 0x3d,
					0x4a, (byte)0xc4, (byte)0xd1, (byte)0x81, 0x2b, (byte)0x8b,
					(byte)0x9f, (byte)0xa5, (byte)0xaf, 0x0e, 0x7f, 0x55,
					(byte)0xfe, 0x73, 0x04, (byte)0xdf, 0x41, 0x57, 0x09, 0x26,
					(byte)0xf3, 0x31, 0x1f, 0x15, (byte)0xc4, (byte)0xd6, 0x5a,
					0x73, 0x2c, 0x48, 0x31, 0x16, (byte)0xee, 0x3d, 0x3d, 0x2d,
					0x0a, (byte)0xf3, 0x54, (byte)0x9a, (byte)0xd9, (byte)0xbf,
					0x7c, (byte)0xbf, (byte)0xb7, (byte)0x8a, (byte)0xd8,
					(byte)0x84, (byte)0xf8, 0x4d, 0x5b, (byte)0xeb, 0x04, 0x72,
					0x4d, (byte)0xc7, 0x36, (byte)0x9b, 0x31, (byte)0xde,
					(byte)0xf3, 0x7d, 0x0c, (byte)0xf5, 0x39, (byte)0xe9,
					(byte)0xcf, (byte)0xcd, (byte)0xd3, (byte)0xde, 0x65, 0x37,
					0x29, (byte)0xea, (byte)0xd5, (byte)0xd1 };

			BigInteger n = new BigInteger(1, N1);
			BigInteger e = new BigInteger(1, E1);
			RSAPublicKey pkcsPublicKey1 = new RSAPublicKey(n, e);
			BigInteger d = new BigInteger(1, D1);
			RSAPrivateModKey pkcsPrivateModKey1 = new RSAPrivateModKey(n, d);
			BigInteger p = new BigInteger(1, P1);
			BigInteger q = new BigInteger(1, Q1);
			RSAPrivateCrtKey pkcsPrivateCrtKey1 = new RSAPrivateCrtKey(p, q, d, e);

			rsae = Cipher.getInstance("RSA", "CryptoKitty");
			rsae.init(Cipher.ENCRYPT_MODE, pkcsPublicKey1, new IvParameterSpec(ps1));
			ciphertext = rsae.doFinal(pkcsMessage1);
			if (Arrays.equals(ciphertext, pkcsCiphertext1)) {
				System.out.println("RSA PKCS test 2 passed!");
			}
			else {
				System.out.println("RSA PKCS test 2 failed!");;				
			}

			rsad = Cipher.getInstance("RSA", "CryptoKitty");
			rsad.init(Cipher.DECRYPT_MODE, pkcsPrivateModKey1);
			plaintext = rsad.doFinal(ciphertext);
			if (Arrays.equals(pkcsMessage1, plaintext)) {
				System.out.println("RSA PKCS test 3 passed!");
			}
			else {
				System.out.println("RSA PKCS test 3 failed!");;				
			}

			rsad = Cipher.getInstance("RSA", "CryptoKitty");
			rsad.init(Cipher.DECRYPT_MODE, pkcsPrivateCrtKey1);
			plaintext = rsad.doFinal(ciphertext);
			if (Arrays.equals(pkcsMessage1, plaintext)) {
				System.out.println("RSA PKCS test 4 passed!");
			}
			else {
				System.out.println("RSA PKCS test 4 failed!");;				
			}

		}
		catch (NoSuchAlgorithmException e) {
			System.err.println(e.getMessage());
			System.out.println("RSA test failed!");;
		}
		catch (NoSuchProviderException e) {
			System.err.println(e.getMessage());
			System.out.println("RSA test failed!");;
		}
		catch (NoSuchPaddingException e) {
			System.err.println(e.getMessage());
			System.out.println("RSA test failed!");;
		}
		catch (InvalidKeyException e) {
			System.err.println(e.getMessage());
			System.out.println("RSA test failed!");;
		}
		catch (IllegalBlockSizeException e) {
			System.err.println(e.getMessage());
			System.out.println("RSA test failed!");;
		}
		catch (BadPaddingException e) {
			System.err.println(e.getMessage());
			System.out.println("RSA test failed!");;
		}
		catch (InvalidAlgorithmParameterException e) {
			System.err.println(e.getMessage());
			System.out.println("RSA test failed!");;
		}

	}

}
